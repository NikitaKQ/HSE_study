Task 1

0x6c6c6337 = 01101100011011000110 00110 0110111 = lui t1, 444102
0x54830313 = 01010100100000110 000 00110 0010011 = addi t1, t1, 1352
0x412033b7 = 01000001001000000011 00111 0110111 = lui t2, 266755
0xc6f38393 = 110001101111 00111 000 00111 0010011 = addi t2, t2, -913
0x00535e37 = 00000000010100110101 11100 0110111 = lui t3, 1333
0xf43e0e13 = 11110100001111100 000 11100 0010011 = addi t3, t3, -189
0x10010437 = 00010000000000010000 01000 0110111 = lui s0, 65552
0x00040413 = 000000000000 01000 000 01000 0010011 = addi s0, s0, 0
0x00642023 = 000000 00110 01000 010 00000 0100011 = sw t1, 0(s0) 
0x00742223 = 000000 00111 01000 010 00100 0100011 = sw t2, 4(s0)
0x01c42423 = 000000 11100 01000 010 01000 0100011 = sw t3, 8(s0)
0x00400893 = 00000000100 00000 000 10001 0010011 = addi a7, zero, 4
0x00800533 = 01000 00000 000 01010 0110011 = add a0, zero, s0
0x00000073 = 000000000000000000000 1110011 = ecall

the programm:

lui t1, 444102
addi t1, t1, 1352
lui t2, 266755
addi t2, t2, -913
lui t3, 1333
addi t3, t3, -189
lui s0, 65552
addi s0, s0, 0
sw t1, 0(s0) 
sw t2, 4(s0)
sw t3, 8(s0)
addi a7, zero, 4
add a0, zero, s0
ecall

The programm outputs "Hello, ACOS"

The programm can be shortened by assigning the numbers directly to t1, t2,t3. Also, the 8th operation does not do anything, so we can get rid of it:

li t1, 1819043144
li t2, 1092627567
li t3, 5459779
lui s0, 65552
sw t1, 0(s0)
sw t2, 4(s0)
sw t3, 8(s0)
add a0, zero, s0
addi a7, zero, 4
ecall



Task 2

0x00500893 = 101 00000 000 10001 0010011 = addi a7, zero, 5

0x00000073 = 0000000000000000000 1110011 = ecall

0x00a00333 = 1010 00000 000 00110 0110011 = add t1, zero, a0 

0x01f55293 = 11111 01010 101 00101 0010011 = srli t0, a0, 31                                         

0x00000073 = 0000000000000000000 1110011 = ecall

0x00a00eb3 = 1010 00000 000 11101 0110011 = add t4, zero, a0 

0x01f55e13 = 11111 01010 101 11100 0010011 = srli t3, a0, 31 

0x06030263 = 1100000 00110 000 0010 0 1100011 = beq t1, zero, label1 # imm = 100                                  

0x060e8063 = 1100000 11101 000 0000 0 1100011 = beq t4, zero, label2 # imm = 96        

0x00028663 = 00101 000 0110 0 1100011 = beq t0, zero, label3 # imm = 12                             

0xfff34313 = 111111111111 00110 100 00110 0010011 = xori t1, t1, -1   

0x00130313 = 1 00110 000 00110 0010011 = addi t1, t1, 1

0x000e0663 = 11100 000 0110 0 1100011 = beq t3, zero, label4 # imm = 12               

0xfffece93 = 111111111111 11101 100 11101 0010011 = xori t4, t4, -1     

0x001e8e93 = 1 11101 000 11101 0010011 = addi t4, t4, 1

0x01d35863 = 11101 00110 101 1000 0 1100011 = bge t1, t4, label5 # imm = 16    

0x006eceb3 = 110 11101 100 11101 0110011 = xor t4, t4, t1

0x006ec333 = 110 11101 100 00110 0110011 = xor t1, t4, t1      

0x006eceb3 = 110 11101 100 11101 0110011 = xor t4, t4, t1

0x000003b3 = 0 000 00111 0110011 = add t2, zero, zero       

0x006383b3 = 000000 00110 00111 000 00111 0110011 = add t2, t2, t1          

0xfffe8e93 = 1 11111111111 11101 000 11101 0010011 = addi t4, t4, -1        

0xffd04ce3 = 1 111111 11101 00000 100 1100 1 1100011 =  blt zero, t4, label6 # imm = -8 

0x01c2cfb3 = 11100 00101 100 11111 0110011 = xor t6, t0, t3                 

0x000f8663 = 11111 000 0110 0 1100011 = beq t6, zero, label7 # imm = 12                     

0xfff3c393 = 111111111111 00111 100 00111 0010011 = xori t2, t2, -1         

0x00138393 = 1 00111 000 00111 0010011 = addi t2, t2, 1                     

0x00100893 = 1 00000 000 10001 0010011 = addi a7, zero, 1                   

0x00700533 = 00111 00000 000 01010 0110011 = add a0, zero, t2               

0x00000073 = 1110011 = ecall                                                

0x00a00893 = 1010 00000 000 10001 0010011 = addi a7, zero, 10               

0x00000073 = 1110011 = ecall                                                

0x00100893 = 1 00000 000 10001 0010011 = addi a7, zero, 1              
     
0x00000533 = 0 000000 000 01010 0110011 =                 

0x00000073 = 1110011 = ecall                                                

0x00a00893 = 01010 00000 000 10001 0010011 = addi a7, zero, 10              

0x00000073 = 1110011 = ecall                                                

The programm:
addi a7, zero, 5
ecall
add t1, zero, a0 
srli t0, a0, 31 
ecall
add t4, zero, a0
srli t3, a0, 31
beq t1, zero, label1 #  25
beq t4, zero, label2 #  24
beq t0, zero, label3 #  3
xori t1, t1, -1 
addi t1, t1, 1
label3:
beq t3, zero, label4 #  3
xori t4, t4, -1
addi t4, t4, 1
label4:
bge t1, t4, label5 #  4
xor t4, t4, t1
xor t1, t4, t1
xor t4, t4, t1
label5:
add t2, zero, zero
label6:
add t2, t2, t1
addi t4, t4, -1
blt zero, t4, label6 #  -2
xor t6, t0, t3 
beq t6, zero, label7 #  3
xori t2, t2, -1
addi t2, t2, 1
label7:
addi a7, zero, 1
add a0, zero, t2
ecall
addi a7, zero, 10
ecall
label1:
label2:
addi a7, zero, 1 
add a0, zero, zero
ecall
addi a7, zero, 10
ecall

The programm takes numbers a and b. If any of them is 0, the output is 0. If they are both not 0, their signs are stored and their modules are sorted. Then the bigger number is being added to the resulting variable and the smaller is decreasing by 1 while the smaller is bigger than 0. Then the result is negated if the signs of a and b were different. All in all it turns out that the programm just multiplies a and b.

Shorter programm:
addi a7, zero, 5
ecall
add t0, zero, a0
ecall
add t1, zero, a0
mul t2, t0, t1
add a0, zero, t2
addi a7, zero, 1
ecall
